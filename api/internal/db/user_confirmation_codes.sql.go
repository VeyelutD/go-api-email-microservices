// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_confirmation_codes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserConfirmationToken = `-- name: CreateUserConfirmationToken :one
INSERT INTO user_confirmation_tokens (email, token, expires_at)
VALUES ($1, $2, $3) RETURNING id, email, token, expires_at, created_at
`

type CreateUserConfirmationTokenParams struct {
	Email     string           `json:"email"`
	Token     string           `json:"token"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateUserConfirmationToken(ctx context.Context, arg CreateUserConfirmationTokenParams) (UserConfirmationToken, error) {
	row := q.db.QueryRow(ctx, createUserConfirmationToken, arg.Email, arg.Token, arg.ExpiresAt)
	var i UserConfirmationToken
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUserLoginCode = `-- name: CreateUserLoginCode :one
INSERT INTO user_login_codes (email, code)
VALUES ($1, $2) RETURNING id, email, code, created_at
`

type CreateUserLoginCodeParams struct {
	Email string `json:"email"`
	Code  string `json:"code"`
}

func (q *Queries) CreateUserLoginCode(ctx context.Context, arg CreateUserLoginCodeParams) (UserLoginCode, error) {
	row := q.db.QueryRow(ctx, createUserLoginCode, arg.Email, arg.Code)
	var i UserLoginCode
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Code,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserConfirmationToken = `-- name: DeleteUserConfirmationToken :exec
DELETE
FROM user_confirmation_tokens
WHERE id = $1
`

func (q *Queries) DeleteUserConfirmationToken(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserConfirmationToken, id)
	return err
}

const deleteUserLoginCode = `-- name: DeleteUserLoginCode :exec
DELETE
FROM user_login_codes
WHERE id = $1
`

func (q *Queries) DeleteUserLoginCode(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserLoginCode, id)
	return err
}

const getUserConfirmationToken = `-- name: GetUserConfirmationToken :one
SELECT id, email, token, expires_at, created_at
from user_confirmation_tokens
WHERE token = $1
`

func (q *Queries) GetUserConfirmationToken(ctx context.Context, token string) (UserConfirmationToken, error) {
	row := q.db.QueryRow(ctx, getUserConfirmationToken, token)
	var i UserConfirmationToken
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserLoginCode = `-- name: GetUserLoginCode :one
SELECT id, email, code, created_at
from user_login_codes
WHERE email = $1
`

func (q *Queries) GetUserLoginCode(ctx context.Context, email string) (UserLoginCode, error) {
	row := q.db.QueryRow(ctx, getUserLoginCode, email)
	var i UserLoginCode
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Code,
		&i.CreatedAt,
	)
	return i, err
}
